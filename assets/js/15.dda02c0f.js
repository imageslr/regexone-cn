(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{384:function(t,e,s){"use strict";s.r(e);var a=s(48),n=Object(a.a)({},(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[s("h1",{attrs:{id:"课程-a1-反向引用"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#课程-a1-反向引用"}},[t._v("#")]),t._v(" 课程 A1：反向引用")]),t._v(" "),s("div",{staticClass:"custom-block tip"},[s("p",{staticClass:"custom-block-title"},[t._v("说明")]),t._v(" "),s("p",[t._v("进阶课程是译者针对 "),s("a",{attrs:{href:"https://regexone.com",target:"_blank",rel:"noopener noreferrer"}},[t._v("regexone.com"),s("OutboundLink")],1),t._v(" 课程中没有涉及的内容所作的补充。")])]),t._v(" "),s("p",[s("strong",[t._v("反向引用 (back referencing)")]),t._v("，或者回溯引用，是指通过 "),s("code",[t._v("\\0")]),t._v("、"),s("code",[t._v("\\1")]),t._v("、"),s("code",[t._v("\\2")]),t._v(" 这样的变量形式来引用模式中已经匹配到的部分。"),s("code",[t._v("\\0")]),t._v(" 表示整个模式匹配到的文本，"),s("code",[t._v("\\1")]),t._v(" 表示捕获的第一个组、"),s("code",[t._v("\\2")]),t._v(" 表示捕获的第二个组，以此类推。")]),t._v(" "),s("blockquote",[s("p",[t._v("在模式中，嵌套组按照"),s("strong",[t._v("从左到右")]),t._v("的"),s("em",[t._v("左括号")]),t._v("出现的顺序定义，第一个捕获组是第一个括号里的内容，以此类推。捕获的结果也按照这个顺序排列。见"),s("RouterLink",{attrs:{to:"/lesson/nested_groups.html"}},[t._v("课程 12：嵌套组")])],1)]),t._v(" "),s("p",[t._v("回溯引用在"),s("strong",[t._v("替换字符串")]),t._v("时十分常用。比如在使用正则表达式搜索文本中的两个数字并交换它们的位置时，可以先使用模式 "),s("code",[t._v("(\\d+)-(\\d+)")]),t._v(" 来搜索，再使用 "),s("code",[t._v("\\2-\\1")]),t._v(" 来替换。下面是 JavaScript 中的代码示例：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"123-456"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\d+)-(\\d+)")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// searchValue")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$2-$1"')]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// replaceValue, $1、$2 等价于上文的 \\1、\\2")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" \n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Output => "456-123"')]),t._v("\n")])])]),s("p",[t._v("或者，当我们需要在文本中"),s("strong",[t._v("匹配两个连续的相同单词")]),t._v("时，也可以使用反向引用。下面是一段 JS 代码示例，用于删除字符串中的连续的重复单词：")]),t._v(" "),s("div",{staticClass:"language-js extra-class"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"hello hello world world"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token regex"}},[s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-source language-regex"}},[t._v("(\\w+) \\1")]),s("span",{pre:!0,attrs:{class:"token regex-delimiter"}},[t._v("/")]),s("span",{pre:!0,attrs:{class:"token regex-flags"}},[t._v("g")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// g 表示全局匹配，即匹配整个字符串中满足该模式的所有子串，而不仅是第一个")]),t._v("\n  "),s("span",{pre:!0,attrs:{class:"token string"}},[t._v('"$1"')]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[t._v('// Output => "hello world"')]),t._v("\n")])])]),s("p",[t._v("请尝试完成下面的练习：")]),t._v(" "),s("Exercise",{attrs:{title:"练习 A1：匹配两个连续的相同单词",data:[{type:"capture",text:"hello hello world",captureData:{results:["hello hello"]}}]}},[s("p",[t._v("使用模式 "),s("SolutionLink",{attrs:{text:"((\\w+) \\2)"}}),t._v("，其中 "),s("code",[t._v("\\2")]),t._v(" 表示从左到右第二个括号 "),s("code",[t._v("(\\w+)")]),t._v(" 捕获到的单词。")],1)])],1)}),[],!1,null,null,null);e.default=n.exports}}]);