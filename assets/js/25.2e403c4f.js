(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{390:function(t,e,a){"use strict";a.r(e);var r=a(45),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"课程-12-嵌套组"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#课程-12-嵌套组"}},[t._v("#")]),t._v(" 课程 12：嵌套组")]),t._v(" "),a("p",[t._v("在处理复杂数据时，您经常会发现自己必须提取多层次的信息，这时就需要使用嵌套组 (nested groups)。通常，结果中的捕获组是按照它们被定义的顺序 (按开括号的顺序) 排列的。")]),t._v(" "),a("p",[t._v('以上一课中 "捕获所有图像文件的文件名" 为例。如果每个图像文件的文件名中都有一个连续的图片编号，则可以通过编写 '),a("strong",[a("code",[t._v("^(IMG(\\d+))\\.png$")])]),t._v(" 之类的表达式 (使用嵌套的括号来捕获数字)，使用同一个模式同时提取文件名和图片编号。")]),t._v(" "),a("p",[t._v("在模式中，嵌套组按照从左到右的顺序定义，第一个捕获组是第一个括号里的内容，以此类推。捕获的结果也按照这个顺序排列。")]),t._v(" "),a("p",[t._v("对于以下字符串，编写一个表达式，该表达式匹配"),a("strong",[t._v("并捕获")]),t._v("完整日期和日期年份。")]),t._v(" "),a("Exercise",{attrs:{title:"练习 12：匹配嵌套组",data:[{type:"capture",text:"Jan 1987",captureData:{results:["Jan 1987","1987"]}},{type:"capture",text:"May 1969",captureData:{results:["May 1969","1969"]}},{type:"capture",text:"Aug 2011",captureData:{results:["Aug 2011","2011"]}}]}},[a("p",[t._v("这个表达式需要捕获两部分数据，即年份和整个日期。这需要使用嵌套的捕获组，如表达式 "),a("SolutionLink",{attrs:{text:"(\\w+ (\\d+))"}}),t._v(" 所示。")],1),t._v(" "),a("p",[t._v("我们也可以使用 \\s+ 来代替空格，以捕获月份和年份之间任意数量的空格。")])])],1)}),[],!1,null,null,null);e.default=s.exports}}]);