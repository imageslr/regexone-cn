(window.webpackJsonp=window.webpackJsonp||[]).push([[34],{403:function(t,e,a){"use strict";a.r(e);var r=a(48),s=Object(r.a)({},(function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"课程-2-点-dot"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#课程-2-点-dot"}},[t._v("#")]),t._v(" 课程 2：点 Dot")]),t._v(" "),a("p",[t._v("在一些纸牌游戏中，小丑是一个百搭牌 (wildcard)，可以代表桥牌中的任意一张牌。在使用正则表达式的时候，我们经常需要匹配一串不知道具体内容的、但是共享相同模式或结构的文本，例如电话号码或邮政编码。")]),t._v(" "),a("p",[t._v("类似于纸牌游戏，正则表达式中也有"),a("strong",[t._v("通配符 (wildcard)")]),t._v(" 的概念，由元字符 "),a("code",[t._v(".")]),t._v(" (点) 来表示，可以"),a("strong",[t._v("匹配任意单个字符")]),t._v(" (字母、数字、空格等等)。您可能会注意到，这包含了句点字符的匹配。因此，如果想专门匹配一个句点，我们需要使用斜杠来转义，也就是 "),a("code",[t._v("\\.")]),t._v("。")]),t._v(" "),a("p",[t._v("下面是一些字符不同但长度相同的字符串。尝试编写一个可以匹配前三个字符串、但不能匹配最后一个 (要跳过的) 的模式。您可能会发现必须转义元字符 "),a("code",[t._v(".")]),t._v(" 以匹配某些行中的句点。")]),t._v(" "),a("Exercise",{attrs:{title:"练习 2：使用通配符",data:[{type:"match",text:"cat."},{type:"match",text:"896."},{type:"match",text:"?=+."},{type:"skip",text:"abc1"}]}},[t._v("您可以使用 "),a("SolutionLink",{attrs:{text:"...\\."}}),t._v(" 来匹配前三个 (通配) 字符，同时转义最后一个通配符元字符来匹配到句点。这保证了它不会匹配到第四行的 '1'。")],1)],1)}),[],!1,null,null,null);e.default=s.exports}}]);